#grammar

PLUS 		  ::= '\+'
MINUS 		  ::= '-'
DIVIDE 		  ::= '/(?!\*)'
MULT 		  ::= '\*'
LESSEQUAL 	  ::= '<='
GREATEREQUAL  ::= '>='
DEQUAL 		  ::= '=='
DISTINT 	  ::= '!='
COLONEQUAL 	  ::= ':='
GREATER 	  ::= '>'
LESS 		  ::= '<'
SEMICOLON 	  ::= ';'
COMMA 		  ::= ','
LPAREN 		  ::= '\('
RPAREN 		  ::= '\)'
COLON 		  ::= ':'
LBRACKET 	  ::= '\['
RBRACKET 	  ::= '\]'

	ID ::= '[A-Za-z_][\w]*'

  FNUMBER ::= '((0(?!\d))|([1-9]\d*))((\.\d+(e[+-]?\d+)?)|(e[+-]?\d+))'
  INUMBER ::= '0(?!\d)|([1-9]\d*)'
     TEXT ::= '"[^\n]*?(?<!\\)"'
CHARACTER ::= "'\w'"
 comments ::= '/\*[\w\W]*?\*/'


PROGRAMA ::= LIST_FUNS

LIST_FUNS ::= FUN
	         |LIST_FUNS FUN


FUN ::= 'fun' ID '(' ARGS ')' LOCALES FUN 'begin' SENTENCIAS 'end'
		|'fun' ID'('ARGS')' LOCALES 'begin' SENTENCIA 'end' FUNCION
		|'fun' 'main''('')'LOCALES FUN 'begin' SENTENCIA RETURN 'end'

ARGS ::= ID ':' TIPO 
       | ID ':' TIPO '[' INUMERO ']' 
       | ARGS ',' ID ':' TIPO ','
       | ARGS ',' ID ':' TIPO '[' INUMERO ']' ','
       |

TIPO ::= 'float' 
	    |'int'

LOCALES ::= ID ':' TIPO ';' 
                |ID ':' TIPO '[' TIPO ']' ';'   		  
		 			 |LOCALES ID ':' TIPO ';'
		 			 |LOCALES ID ':' '[' TIPO ']' ';'
					 |

SENTENCIAS ::=  ASIGNACION
	       | WHILE
			 | IF
			 | CALL
			 |	FUNM
			 |

CALL ::= ID '(' ARGS ')';

ASIGNACION ::= ID ':=' ID ';'
	          |ID ':=' FNUMBER ';'
	      	 |ID ':=' INUMERO ';'
	      	 |ID ':=' VECT ';'
	      	 |ID ':=' EXPRESION ';'
	      	 |ID ':=' FNUMBER

WHILE ::= 'while' CONDICIONES 'do' 'begin' SENTENCIAS 'end'
			| 'while' CONDICIONES 'do' 'skip'

IF ::= 'if' CONDICIONES 'then' SENTENCIAS
	   |'if' CONDICIONES 'then' SENTENCIAS 'else' SENTENCIAS

CONDICIONES ::= EXPRESION '>' EXPRESION
				|EXPRESION '<' EXPRESION
				|EXPRESION '>=' EXPRESION
				|EXPRESION '<=' EXPRESION
				|EXPRESION '=!' EXPRESION
				|EXPRESION 'not' EXPRESION
	         |EXPRESION 'or' EXPRESION
				|EXPRESION 'and' EXPRESION
	         |'not' EXPRESION;

FUNM ::=  PRINT
			|WRITE
			|RETURN
			|READ 

VECT ::=  ID '[' INUMERO ']'
	   |ID '[' ID ']'


PRINT ::= 'print' '(' TEXT ')' ';'

WRITE ::= 'write' '(' EXPRESION ')' ';'

RETURN ::= 'return' EXPRESION ';'

READ ::=  'read' '(' VECT ')'
	   |read' '(' ID ')'

EXPRESION ::= EXPRESION '+' EXPRESION
	     	|EXPRESION '-' EXPRESION
	     	|EXPRESION '*' EXPRESION
	     	|EXPRESION '/' EXPRESION
	     	|'-' EXPRESION
	     	|'+' EXPRESION
	     	|'(' EXPRESION ')'
	     	|ID '(' EXPRESION ')'
	     	|ID
			|VECT
	     	|INUMERO |FNUMBER
	     	|'int' '(' EXPRESION ')'	
	     	|'float' '(' EXPRESION ')'





